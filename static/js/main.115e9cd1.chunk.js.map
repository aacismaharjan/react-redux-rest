{"version":3,"sources":["comps/ColorTheme.jsx","comps/Navbar.jsx","comps/Footer.jsx","redux/actions.js","comps/Card.jsx","redux/actionTypes.js","comps/Loading.jsx","comps/CardContainer.jsx","comps/CreatePost.jsx","comps/Toast.jsx","App.js","serviceWorker.js","redux/reducer/postReducer.js","redux/reducer/index.js","redux/store.js","index.js"],"names":["getThemeColor","localStorage","getItem","Navbar","className","href","target","rel","type","name","defaultValue","onChange","e","color","value","document","documentElement","style","setProperty","setItem","setThemeColor","Footer","textAlign","fontWeight","padding","margin","role","aria-label","API_URL","connect","store","postReducer","postDelete","updatePost","dispatch","ownProps","id","post","removePost","payload","axios","delete","then","catch","err","error","message","toggleUpdateMode","title","body","EditButton","onClick","loading","DeleteButton","postId","toString","padStart","Loading","posts","map","key","inEditMode","inUpdateMode","fetchPosts","get","res","data","addPost","p","patchPost","patch","toggleEditMode","useState","userId","setPost","useEffect","handleChange","spellCheck","placeholder","preventDefault","marginRight","postPost","toast","setToast","App","ApplyThemeColor","Boolean","window","location","hostname","match","initialStore","state","action","filter","find","rootReducer","combineReducers","composeEnhancers","compose","createStore","applyMiddleware","ReduxThunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.115e9cd1.chunk.js","sourcesContent":["const getThemeColor = () => {\r\n  if (!typeof Storage) return\r\n  let color = localStorage.getItem('theme-color')\r\n  return color\r\n}\r\n\r\nconst ApplyThemeColor = () => {\r\n  let color = getThemeColor()\r\n  if (color) document.documentElement.style.setProperty('--primary', color)\r\n}\r\n\r\nconst setThemeColor = (color) => {\r\n  if (!typeof Storage) return\r\n  localStorage.setItem('theme-color', color)\r\n}\r\n\r\nexport { getThemeColor, setThemeColor, ApplyThemeColor }\r\n","import React from 'react'\r\nimport { getThemeColor, setThemeColor } from './ColorTheme'\r\n\r\nexport default function Navbar() {\r\n  const handleColorChange = (e) => {\r\n    const color = e.target.value\r\n    document.documentElement.style.setProperty('--primary', color)\r\n    setThemeColor(color)\r\n  }\r\n  return (\r\n    <nav className='navbar'>\r\n      <a\r\n        href='https://www.instagram.com/aacismaharjan'\r\n        target='_blank'\r\n        rel='noopener noreferrer'\r\n      >\r\n        Aashish Maharjan\r\n      </a>\r\n      <div className='right-side'>\r\n        <form>\r\n          <input\r\n            type='color'\r\n            name='color'\r\n            className='color'\r\n            defaultValue={getThemeColor() || '#000000'}\r\n            onChange={handleColorChange}\r\n          />\r\n        </form>\r\n        <a\r\n          className='btn btn-sm'\r\n          href='https://github.com/aacismaharjan/react-redux-rest.git'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          Source Code\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div>\r\n      <h6\r\n        style={{\r\n          textAlign: 'center',\r\n          color: 'gray',\r\n          fontWeight: 500,\r\n          padding: '1em',\r\n          margin: 0,\r\n        }}\r\n      >\r\n        &copy; 2020, Made with{' '}\r\n        <span role='img' aria-label='Heart'>\r\n          🖤\r\n        </span>{' '}\r\n        by Aashish Maharjan\r\n      </h6>\r\n    </div>\r\n  )\r\n}\r\n","import * as actions from './actionTypes'\r\nimport axios from 'axios'\r\n\r\nconst API_URL = 'https://jsonplaceholder.typicode.com/posts'\r\n\r\nexport const fetchPosts = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: actions.FETCH_POSTS_REQUEST,\r\n    })\r\n    axios\r\n      .get(API_URL)\r\n      .then((res) =>\r\n        dispatch({\r\n          type: actions.FETCH_POSTS_SUCCESS,\r\n          payload: {\r\n            posts: res.data,\r\n          },\r\n        })\r\n      )\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: actions.FETCH_POSTS_FAILURE,\r\n          payload: {\r\n            error: err.message,\r\n          },\r\n        })\r\n      )\r\n  }\r\n}\r\n\r\n// Post a post to server\r\nexport const postPost = (post) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.POST_POST_REQUEST, payload: { post } })\r\n    axios\r\n      .post(API_URL, post)\r\n      .then((res) =>\r\n        dispatch({\r\n          type: actions.POST_POST_SUCCESS,\r\n          payload: { post: res.data },\r\n        })\r\n      )\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: actions.POST_POST_FAILURE,\r\n          payload: { error: err.message },\r\n        })\r\n      )\r\n  }\r\n}\r\n\r\n// Update post to server\r\nexport const patchPost = (post) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.UPDATE_POST_REQUEST, payload: { id: post.id } })\r\n    axios\r\n      .patch(`${API_URL}/${post.id}`, post)\r\n      .then((res) => {\r\n        dispatch({\r\n          type: actions.UPDATE_POST_SUCCESS,\r\n          payload: { post: res.data },\r\n        })\r\n      })\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: actions.UPDATE_POST_FAILURE,\r\n          payload: { error: err.message },\r\n        })\r\n      )\r\n  }\r\n}\r\n\r\n// Remove post from server\r\nexport const removePost = (id) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.DELETE_POST_REQUEST, payload: { id } })\r\n    axios\r\n      .delete(`${API_URL}/${id}`)\r\n      .then(() => {\r\n        dispatch({ type: actions.DELETE_POST_SUCCESS, payload: { id } })\r\n      })\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: actions.DELETE_POST_FAILURE,\r\n          payload: { error: err.message },\r\n        })\r\n      )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { removePost } from '../redux/actions'\r\nimport * as actions from '../redux/actionTypes'\r\n\r\nfunction Card({ post, removePost, postDelete, updatePost, toggleUpdateMode }) {\r\n  const { id, title, body } = post\r\n\r\n  const EditButton = () => (\r\n    <span className='card-edit' onClick={toggleUpdateMode}>\r\n      {updatePost.post.id === id && updatePost.loading ? 'Editing...' : 'Edit'}\r\n    </span>\r\n  )\r\n\r\n  const DeleteButton = () => (\r\n    <span className='card-delete' onClick={removePost}>\r\n      {postDelete.post.id === id && postDelete.loading\r\n        ? 'Deleting...'\r\n        : 'Delete'}\r\n    </span>\r\n  )\r\n\r\n  // let postId = id.toString().padString(2, '0')\r\n  let postId = id.toString().padStart(2, '0')\r\n\r\n  return (\r\n    <div className='card'>\r\n      <h2>\r\n        <span className='card-id'>{postId}</span>\r\n        <span className='card-title'>{title}</span>\r\n        <EditButton />\r\n        <DeleteButton />\r\n      </h2>\r\n      <p>{body}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  const {\r\n    post: { id },\r\n  } = ownProps\r\n  return {\r\n    removePost: () => dispatch(removePost(id)),\r\n    toggleUpdateMode: () =>\r\n      dispatch({ type: actions.TOGGLE_UPDATE_MODE, payload: { id } }),\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const { postDelete, updatePost } = store.postReducer\r\n  return {\r\n    postDelete,\r\n    updatePost,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Card)\r\n","// Actions to fetch a post\r\nexport const FETCH_POSTS_REQUEST = 'FETCH_POSTS_REQUEST'\r\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS'\r\nexport const FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE'\r\n\r\n// Actions to delete a post\r\nexport const DELETE_POST_REQUEST = 'DELETE_POST_REQUEST'\r\nexport const DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS'\r\nexport const DELETE_POST_FAILURE = 'DELETE_POST_FAILURE'\r\n\r\n// Actions to post a post\r\nexport const POST_POST_REQUEST = 'POST_POST_REQUEST'\r\nexport const POST_POST_SUCCESS = 'POST_POST_SUCCESS'\r\nexport const POST_POST_FAILURE = 'POST_POST_FAILURE'\r\n\r\n// Actions to update a post\r\nexport const UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST'\r\nexport const UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS'\r\nexport const UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE'\r\n\r\n// Actions to toggle a action\r\nexport const TOGGLE_EDIT_MODE = 'TOGGLE_EDIT_MODE'\r\nexport const TOGGLE_UPDATE_MODE = 'TOGGLE_UPDATE_MODE'\r\n","import React from 'react'\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <div className='loader-wrapper'>\r\n      <div className='loader'></div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Card from './Card'\r\nimport Loading from './Loading'\r\n\r\nfunction CardContainer({ loading, error, posts }) {\r\n  if (loading) return <Loading />\r\n  if (error)\r\n    return (\r\n      <div style={{ padding: '2em', textAlign: 'center' }}>\r\n        <h1 style={{ margin: 0 }}>:(</h1>\r\n        <h5 style={{ margin: 0 }}>Something went wrong!</h5>\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <div className='post-section'>\r\n      <div className='card-container'>\r\n        {posts && posts.map((post) => <Card key={post.id} post={post} />)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const { error, loading, posts } = store.postReducer\r\n  return { error, loading, posts }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CardContainer)\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { fetchPosts, postPost, patchPost } from '../redux/actions'\r\nimport * as actions from '../redux/actionTypes'\r\n\r\n// For generating ID's\r\nlet postId = 100\r\n\r\nfunction CreatePost({\r\n  fetchPosts,\r\n  addPost,\r\n  dispatch,\r\n  inEditMode,\r\n  inUpdateMode,\r\n  updatePost,\r\n  patchPost,\r\n  toggleEditMode,\r\n}) {\r\n  const [post, setPost] = useState({\r\n    userId: 0,\r\n    id: 0,\r\n    title: '',\r\n    body: '',\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetchPosts()\r\n  }, [fetchPosts])\r\n\r\n  useEffect(() => {\r\n    setPost({ ...updatePost.post })\r\n  }, [inUpdateMode, updatePost])\r\n\r\n  // Handles form submit\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (!(post.title && post.body)) return\r\n\r\n    dispatch({ type: actions.TOGGLE_EDIT_MODE })\r\n    if (inUpdateMode) patchPost(post)\r\n    else addPost({ ...post, id: ++postId, userId: postId })\r\n    setPost({ ...post, title: '', body: '' })\r\n  }\r\n\r\n  // Handles form changes\r\n  const handleChange = (e) => {\r\n    setPost({ ...post, [e.target.name]: e.target.value })\r\n  }\r\n\r\n  return (\r\n    <div className='card-creation-section'>\r\n      <div className='action-buttons'>\r\n        {!inEditMode && <button onClick={toggleEditMode}>Add Post</button>}\r\n      </div>\r\n\r\n      {inEditMode && (\r\n        <div className='overlay'>\r\n          <form spellCheck='false'>\r\n            <h3 style={{ margin: 0 }}>\r\n              {inUpdateMode ? `Update Post: [${post.id}]` : 'Add Post'}\r\n            </h3>\r\n            <input\r\n              type='text'\r\n              placeholder='Enter title'\r\n              name='title'\r\n              value={post.title || ''}\r\n              onChange={handleChange}\r\n            />\r\n            <textarea\r\n              type='text'\r\n              placeholder='Enter body'\r\n              name='body'\r\n              value={post.body || ''}\r\n              onChange={handleChange}\r\n            />\r\n            <div>\r\n              <button onClick={handleSubmit} style={{ marginRight: '1em' }}>\r\n                {inUpdateMode ? 'Update Post' : 'Add Post'}\r\n              </button>\r\n\r\n              {inEditMode && (\r\n                <button\r\n                  type='button'\r\n                  className='btn-secondary'\r\n                  onClick={toggleEditMode}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              )}\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const { updatePost, inEditMode, inUpdateMode } = store.postReducer\r\n  return { updatePost, inEditMode, inUpdateMode }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchPosts: () => dispatch(fetchPosts()),\r\n    addPost: (p) => dispatch(postPost(p)),\r\n    patchPost: (p) => dispatch(patchPost(p)),\r\n    toggleEditMode: () => dispatch({ type: actions.TOGGLE_EDIT_MODE }),\r\n    dispatch,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePost)\r\n","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Toast = ({ postDelete, postPost, updatePost }) => {\r\n  const [toast, setToast] = useState(null)\r\n\r\n  useEffect(() => {\r\n    if (postDelete.error) setToast(postDelete.error)\r\n    else if (postDelete.loading) setToast('Deleting post....')\r\n    else if (postPost.error) setToast(postPost.error)\r\n    else if (postPost.loading) setToast('Adding a post...')\r\n    else if (updatePost.error) setToast(updatePost.error)\r\n    else if (updatePost.loading) setToast('Updating a post...')\r\n    else setToast(null)\r\n  }, [postDelete, postPost, updatePost])\r\n\r\n  return toast && <h4 className='alert'>{toast}</h4>\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const { postDelete, postPost, updatePost } = store.postReducer\r\n  return { postDelete, postPost, updatePost }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Toast)\r\n","import React from 'react'\nimport { CardContainer, CreatePost, Toast, Navbar, Footer } from './comps'\nimport { ApplyThemeColor } from './comps/ColorTheme'\n\nconst App = () => {\n  ApplyThemeColor()\n  return (\n    <>\n      <Navbar />\n      <CreatePost />\n      <CardContainer />\n      <Toast />\n      <Footer />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actions from '../actionTypes'\r\n\r\n// Empty Post\r\nconst post = {\r\n  userId: null,\r\n  id: null,\r\n  title: '',\r\n  body: '',\r\n}\r\n\r\n// Initial state for our store\r\nlet initialStore = {\r\n  posts: [],\r\n  loading: false,\r\n  error: null,\r\n  postDelete: {\r\n    post,\r\n    error: null,\r\n    loading: null,\r\n  },\r\n  postPost: {\r\n    post,\r\n    error: null,\r\n    loading: null,\r\n  },\r\n  updatePost: {\r\n    post,\r\n    error: null,\r\n    loading: null,\r\n  },\r\n  inEditMode: false,\r\n  inUpdateMode: false,\r\n}\r\n\r\nconst postReducer = (state = initialStore, action) => {\r\n  switch (action.type) {\r\n    // Fetching Reducer\r\n    case actions.FETCH_POSTS_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n    case actions.FETCH_POSTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        posts: action.payload.posts,\r\n        error: null,\r\n      }\r\n    case actions.FETCH_POSTS_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        posts: [],\r\n        error: action.payload.error,\r\n      }\r\n\r\n    // Deleting Reducer\r\n    case actions.DELETE_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        postDelete: {\r\n          ...state.postDelete,\r\n          loading: true,\r\n          post: { id: action.payload.id },\r\n        },\r\n      }\r\n    case actions.DELETE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((post) => post.id !== action.payload.id),\r\n        postDelete: {\r\n          ...state.postDelete,\r\n          loading: false,\r\n          error: null,\r\n          post: {},\r\n        },\r\n      }\r\n    case actions.DELETE_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        postDelete: {\r\n          ...state.postDelete,\r\n          loading: false,\r\n          error: action.payload.error,\r\n          post: {},\r\n        },\r\n      }\r\n\r\n    // Adding Reducer\r\n    case actions.POST_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        postPost: {\r\n          ...state.postPost,\r\n          loading: true,\r\n          post: action.payload.post,\r\n        },\r\n      }\r\n    case actions.POST_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          { ...action.payload.post, id: action.payload.post.userId },\r\n          ...state.posts,\r\n        ],\r\n        postPost: {\r\n          ...state.postPost,\r\n          loading: false,\r\n          post: {},\r\n          error: null,\r\n        },\r\n      }\r\n    case actions.POST_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        postPost: {\r\n          ...state.postPost,\r\n          loading: false,\r\n          error: action.payload.error,\r\n          post: {},\r\n        },\r\n      }\r\n\r\n    // Updating Reducer\r\n    case actions.UPDATE_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        inEditMode: false,\r\n        inUpdateMode: false,\r\n        updatePost: {\r\n          ...state.updatePost,\r\n          loading: true,\r\n        },\r\n      }\r\n    case actions.UPDATE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.map((post) => {\r\n          if (post.id === action.payload.post.id) {\r\n            return action.payload.post\r\n          }\r\n          return post\r\n        }),\r\n        inEditMode: false,\r\n        inUpdateMode: false,\r\n        updatePost: {\r\n          ...state.updatePost,\r\n          error: null,\r\n          loading: false,\r\n          post: {},\r\n        },\r\n      }\r\n    case actions.UPDATE_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        inEditMode: false,\r\n        inUpdateMode: false,\r\n        updatePost: {\r\n          ...state.updatePost,\r\n          loading: false,\r\n          error: action.payload.error,\r\n          post: {},\r\n        },\r\n      }\r\n    // Toggle Reducer\r\n    case actions.TOGGLE_EDIT_MODE:\r\n      return {\r\n        ...state,\r\n        inEditMode: !state.inEditMode,\r\n      }\r\n    case actions.TOGGLE_UPDATE_MODE:\r\n      return {\r\n        ...state,\r\n        inEditMode: true,\r\n        inUpdateMode: true,\r\n        updatePost: {\r\n          ...state.updatePost,\r\n          post: {\r\n            ...state.posts.find((post) => post.id === action.payload.id),\r\n          },\r\n        },\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default postReducer\r\n","import { combineReducers } from 'redux'\r\nimport postReducer from './postReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  postReducer,\r\n})\r\nexport default rootReducer\r\n","import { applyMiddleware, createStore, compose } from 'redux'\r\nimport rootReducer from './reducer'\r\nimport ReduxThunk from 'redux-thunk'\r\n\r\nconst isInDev = false\r\nconst composeEnhancers =\r\n  (isInDev &&\r\n    typeof window !== 'undefined' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n  compose\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(ReduxThunk))\r\n)\r\n\r\nexport default store\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}