{"version":3,"sources":["comps/Navbar.jsx","comps/Footer.jsx","redux/actions.js","comps/Card.jsx","redux/actionTypes.js","comps/Loading.jsx","comps/CardContainer.jsx","comps/CreatePost.jsx","comps/Toast.jsx","App.js","serviceWorker.js","redux/redux/fetchPostReducer.js","redux/reducer.js","redux/store.js","index.js"],"names":["Navbar","className","href","target","rel","Footer","style","textAlign","color","fontWeight","padding","margin","role","aria-label","API_URL","connect","store","fetchPostReducer","postDelete","updatePost","dispatch","ownProps","id","post","removePost","type","payload","fetch","method","then","catch","err","error","message","toggleUpdateMode","title","body","EditButton","onClick","loading","DeleteButton","postId","toString","padStart","Loading","posts","map","key","inEditMode","inUpdateMode","fetchPosts","res","json","addPost","p","JSON","stringify","headers","response","data","patchPost","toggleEditMode","useState","userId","setPost","useEffect","handleChange","e","name","value","spellCheck","placeholder","onChange","preventDefault","marginRight","postPost","toast","setToast","App","Boolean","window","location","hostname","match","initialStore","state","action","filter","find","rootReducer","combineReducers","compose","applyMiddleware","ReduxThunk","__REDUX_DEVTOOLS_EXTENSION__","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.5f8ace20.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className='navbar'>\r\n      <a\r\n        href='https://www.instagram.com/aacismaharjan'\r\n        target='_blank'\r\n        rel='noopener noreferrer'\r\n      >\r\n        Aashish Maharjan\r\n      </a>\r\n      <div className='right-side'>\r\n        <a\r\n          className='btn btn-sm'\r\n          href='https://github.com/aacismaharjan/react-redux-rest.git'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          Source Code\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div>\r\n      <h6\r\n        style={{\r\n          textAlign: 'center',\r\n          color: 'gray',\r\n          fontWeight: 500,\r\n          padding: '1em',\r\n          margin: 0,\r\n        }}\r\n      >\r\n        &copy; 2020, Made with{' '}\r\n        <span role='img' aria-label='Heart'>\r\n          ðŸ–¤\r\n        </span>{' '}\r\n        by Aashish Maharjan\r\n      </h6>\r\n    </div>\r\n  )\r\n}\r\n","import * as actions from './actionTypes'\r\n\r\nconst API_URL = 'https://jsonplaceholder.typicode.com/posts'\r\n\r\n// Fetch posts from server\r\nexport const fetchPosts = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: actions.FETCH_POSTS_REQUEST,\r\n    })\r\n    fetch(API_URL)\r\n      .then((res) => res.json())\r\n      .then((posts) =>\r\n        dispatch({\r\n          type: actions.FETCH_POSTS_SUCCESS,\r\n          payload: {\r\n            posts,\r\n          },\r\n        })\r\n      )\r\n      .catch(({ message: error }) =>\r\n        dispatch({\r\n          type: actions.FETCH_POSTS_FAILURE,\r\n          payload: {\r\n            error,\r\n          },\r\n        })\r\n      )\r\n  }\r\n}\r\n\r\n// Post a post to server\r\nexport const postPost = (post) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.POST_POST_REQUEST, payload: { post } })\r\n    fetch(API_URL, {\r\n      method: 'POST',\r\n      body: JSON.stringify(post),\r\n      headers: {\r\n        'Content-type': 'application/json; charset=UTF-8',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) =>\r\n        dispatch({ type: actions.POST_POST_SUCCESS, payload: { post: data } })\r\n      )\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: actions.POST_POST_FAILURE,\r\n          payload: { error: err.message },\r\n        })\r\n      )\r\n  }\r\n}\r\n\r\n// Update post to server\r\nexport const patchPost = (post) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.UPDATE_POST_REQUEST, payload: { id: post.id } })\r\n    fetch(`${API_URL}/${post.id}`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify(post),\r\n      headers: {\r\n        'Content-type': 'application/json;charset=UTF-8',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((post) => {\r\n        dispatch({ type: actions.UPDATE_POST_SUCCESS, payload: { post } })\r\n      })\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: actions.UPDATE_POST_FAILURE,\r\n          payload: { error: err.message },\r\n        })\r\n      )\r\n  }\r\n}\r\n\r\n// Remove post from server\r\nexport const removePost = (id) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.DELETE_POST_REQUEST, payload: { id } })\r\n    fetch(`${API_URL}/${id}`, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(() => {\r\n        dispatch({ type: actions.DELETE_POST_SUCCESS, payload: { id } })\r\n      })\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: actions.DELETE_POST_FAILURE,\r\n          payload: { error: err.message },\r\n        })\r\n      )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { removePost } from '../redux/actions'\r\nimport * as actions from '../redux/actionTypes'\r\n\r\nfunction Card({ post, removePost, postDelete, updatePost, toggleUpdateMode }) {\r\n  const { id, title, body } = post\r\n\r\n  const EditButton = () => (\r\n    <span className='card-edit' onClick={toggleUpdateMode}>\r\n      {updatePost.post.id === id && updatePost.loading ? 'Editing...' : 'Edit'}\r\n    </span>\r\n  )\r\n\r\n  const DeleteButton = () => (\r\n    <span className='card-delete' onClick={removePost}>\r\n      {postDelete.post.id === id && postDelete.loading\r\n        ? 'Deleting...'\r\n        : 'Delete'}\r\n    </span>\r\n  )\r\n\r\n  // let postId = id.toString().padString(2, '0')\r\n  let postId = id.toString().padStart(2, '0')\r\n\r\n  return (\r\n    <div className='card'>\r\n      <h2>\r\n        <span className='card-id'>{postId}</span>\r\n        <span className='card-title'>{title}</span>\r\n        <EditButton />\r\n        <DeleteButton />\r\n      </h2>\r\n      <p>{body}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  const {\r\n    post: { id },\r\n  } = ownProps\r\n  return {\r\n    removePost: () => dispatch(removePost(id)),\r\n    toggleUpdateMode: () =>\r\n      dispatch({ type: actions.TOGGLE_UPDATE_MODE, payload: { id } }),\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const { postDelete, updatePost } = store.fetchPostReducer\r\n  return {\r\n    postDelete,\r\n    updatePost,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Card)\r\n","// Actions to fetch a post\r\nexport const FETCH_POSTS_REQUEST = 'FETCH_POSTS_REQUEST'\r\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS'\r\nexport const FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE'\r\n\r\n// Actions to delete a post\r\nexport const DELETE_POST_REQUEST = 'DELETE_POST_REQUEST'\r\nexport const DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS'\r\nexport const DELETE_POST_FAILURE = 'DELETE_POST_FAILURE'\r\n\r\n// Actions to post a post\r\nexport const POST_POST_REQUEST = 'POST_POST_REQUEST'\r\nexport const POST_POST_SUCCESS = 'POST_POST_SUCCESS'\r\nexport const POST_POST_FAILURE = 'POST_POST_FAILURE'\r\n\r\n// Actions to update a post\r\nexport const UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST'\r\nexport const UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS'\r\nexport const UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE'\r\n\r\n// Actions to toggle a action\r\nexport const TOGGLE_EDIT_MODE = 'TOGGLE_EDIT_MODE'\r\nexport const TOGGLE_UPDATE_MODE = 'TOGGLE_UPDATE_MODE'\r\n","import React from 'react'\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <div className='loader-wrapper'>\r\n      <div className='loader'></div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Card from './Card'\r\nimport Loading from './Loading'\r\n\r\nfunction CardContainer({ loading, error, posts }) {\r\n  if (loading) return <Loading />\r\n  if (error)\r\n    return (\r\n      <div style={{ padding: '2em', textAlign: 'center' }}>\r\n        <h1 style={{ margin: 0 }}>:(</h1>\r\n        <h5 style={{ margin: 0 }}>Something went wrong!</h5>\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <div className='post-section'>\r\n      <div className='card-container'>\r\n        {posts && posts.map((post) => <Card key={post.id} post={post} />)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const { error, loading, posts } = store.fetchPostReducer\r\n  return { error, loading, posts }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CardContainer)\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { fetchPosts, postPost, patchPost } from '../redux/actions'\r\nimport * as actions from '../redux/actionTypes'\r\n\r\n// For generating ID's\r\nlet postId = 100\r\n\r\nfunction CreatePost({\r\n  fetchPosts,\r\n  addPost,\r\n  dispatch,\r\n  inEditMode,\r\n  inUpdateMode,\r\n  updatePost,\r\n  patchPost,\r\n  toggleEditMode,\r\n}) {\r\n  const [post, setPost] = useState({\r\n    userId: 0,\r\n    id: 0,\r\n    title: '',\r\n    body: '',\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetchPosts()\r\n  }, [fetchPosts])\r\n\r\n  useEffect(() => {\r\n    setPost({ ...updatePost.post })\r\n  }, [inUpdateMode, updatePost])\r\n\r\n  // Handles form submit\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (!(post.title && post.body)) return\r\n\r\n    dispatch({ type: actions.TOGGLE_EDIT_MODE })\r\n    if (inUpdateMode) patchPost(post)\r\n    else addPost({ ...post, id: ++postId, userId: postId })\r\n    setPost({ ...post, title: '', body: '' })\r\n  }\r\n\r\n  // Handles form changes\r\n  const handleChange = (e) => {\r\n    setPost({ ...post, [e.target.name]: e.target.value })\r\n  }\r\n\r\n  return (\r\n    <div className='card-creation-section'>\r\n      <div className='action-buttons'>\r\n        {!inEditMode && <button onClick={toggleEditMode}>Add Post</button>}\r\n      </div>\r\n\r\n      {inEditMode && (\r\n        <div className='overlay'>\r\n          <form spellCheck='false'>\r\n            <h3 style={{ margin: 0 }}>\r\n              {inUpdateMode ? `Update Post: [${post.id}]` : 'Add Post'}\r\n            </h3>\r\n            <input\r\n              type='text'\r\n              placeholder='Enter title'\r\n              name='title'\r\n              value={post.title || ''}\r\n              onChange={handleChange}\r\n            />\r\n            <textarea\r\n              type='text'\r\n              placeholder='Enter body'\r\n              name='body'\r\n              value={post.body || ''}\r\n              onChange={handleChange}\r\n            />\r\n            <div>\r\n              <button onClick={handleSubmit} style={{ marginRight: '1em' }}>\r\n                {inUpdateMode ? 'Update Post' : 'Add Post'}\r\n              </button>\r\n\r\n              {inEditMode && (\r\n                <button\r\n                  type='button'\r\n                  className='btn-secondary'\r\n                  onClick={toggleEditMode}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              )}\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const { updatePost, inEditMode, inUpdateMode } = store.fetchPostReducer\r\n  return { updatePost, inEditMode, inUpdateMode }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchPosts: () => dispatch(fetchPosts()),\r\n    addPost: (p) => dispatch(postPost(p)),\r\n    patchPost: (p) => dispatch(patchPost(p)),\r\n    toggleEditMode: () => dispatch({ type: actions.TOGGLE_EDIT_MODE }),\r\n    dispatch,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePost)\r\n","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Toast = ({ postDelete, postPost, updatePost }) => {\r\n  const [toast, setToast] = useState(null)\r\n\r\n  useEffect(() => {\r\n    if (postDelete.error) setToast(postDelete.error)\r\n    else if (postDelete.loading) setToast('Deleting post....')\r\n    else if (postPost.error) setToast(postPost.error)\r\n    else if (postPost.loading) setToast('Adding a post...')\r\n    else if (updatePost.error) setToast(updatePost.error)\r\n    else if (updatePost.loading) setToast('Updating a post...')\r\n    else setToast(null)\r\n  }, [postDelete, postPost, updatePost])\r\n\r\n  return toast && <h4 className='alert'>{toast}</h4>\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const { postDelete, postPost, updatePost } = store.fetchPostReducer\r\n  return { postDelete, postPost, updatePost }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Toast)\r\n","import React from 'react'\nimport { CardContainer, CreatePost, Toast, Navbar, Footer } from './comps'\n\nconst App = () => {\n  return (\n    <>\n      <Navbar />\n      <CreatePost />\n      <CardContainer />\n      <Toast />\n      <Footer />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actions from '../actionTypes'\r\n\r\n// Empty Post\r\nconst post = {\r\n  userId: null,\r\n  id: null,\r\n  title: '',\r\n  body: '',\r\n}\r\n\r\n// Initial state for our store\r\nlet initialStore = {\r\n  posts: [],\r\n  loading: false,\r\n  error: null,\r\n  postDelete: {\r\n    post,\r\n    error: null,\r\n    loading: null,\r\n  },\r\n  postPost: {\r\n    post,\r\n    error: null,\r\n    loading: null,\r\n  },\r\n  updatePost: {\r\n    post,\r\n    error: null,\r\n    loading: null,\r\n  },\r\n  inEditMode: false,\r\n  inUpdateMode: false,\r\n}\r\n\r\nconst fetchPostReducer = (state = initialStore, action) => {\r\n  switch (action.type) {\r\n    // Fetching Reducer\r\n    case actions.FETCH_POSTS_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n    case actions.FETCH_POSTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        posts: action.payload.posts,\r\n        error: null,\r\n      }\r\n    case actions.FETCH_POSTS_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        posts: [],\r\n        error: action.payload.error,\r\n      }\r\n\r\n    // Deleting Reducer\r\n    case actions.DELETE_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        postDelete: {\r\n          ...state.postDelete,\r\n          loading: true,\r\n          post: { id: action.payload.id },\r\n        },\r\n      }\r\n    case actions.DELETE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((post) => post.id !== action.payload.id),\r\n        postDelete: {\r\n          ...state.postDelete,\r\n          loading: false,\r\n          error: null,\r\n          post: {},\r\n        },\r\n      }\r\n    case actions.DELETE_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        postDelete: {\r\n          ...state.postDelete,\r\n          loading: false,\r\n          error: action.payload.error,\r\n          post: {},\r\n        },\r\n      }\r\n\r\n    // Adding Reducer\r\n    case actions.POST_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        postPost: {\r\n          ...state.postPost,\r\n          loading: true,\r\n          post: action.payload.post,\r\n        },\r\n      }\r\n    case actions.POST_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          { ...action.payload.post, id: action.payload.post.userId },\r\n          ...state.posts,\r\n        ],\r\n        postPost: {\r\n          ...state.postPost,\r\n          loading: false,\r\n          post: {},\r\n          error: null,\r\n        },\r\n      }\r\n    case actions.POST_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        postPost: {\r\n          ...state.postPost,\r\n          loading: false,\r\n          error: action.payload.error,\r\n          post: {},\r\n        },\r\n      }\r\n\r\n    // Updating Reducer\r\n    case actions.UPDATE_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        inEditMode: false,\r\n        inUpdateMode: false,\r\n        updatePost: {\r\n          ...state.updatePost,\r\n          loading: true,\r\n        },\r\n      }\r\n    case actions.UPDATE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.map((post) => {\r\n          if (post.id === action.payload.post.id) {\r\n            return action.payload.post\r\n          }\r\n          return post\r\n        }),\r\n        inEditMode: false,\r\n        inUpdateMode: false,\r\n        updatePost: {\r\n          ...state.updatePost,\r\n          error: null,\r\n          loading: false,\r\n          post: {},\r\n        },\r\n      }\r\n    case actions.UPDATE_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        inEditMode: false,\r\n        inUpdateMode: false,\r\n        updatePost: {\r\n          ...state.updatePost,\r\n          loading: false,\r\n          error: action.payload.error,\r\n          post: {},\r\n        },\r\n      }\r\n    // Toggle Reducer\r\n    case actions.TOGGLE_EDIT_MODE:\r\n      return {\r\n        ...state,\r\n        inEditMode: !state.inEditMode,\r\n      }\r\n    case actions.TOGGLE_UPDATE_MODE:\r\n      return {\r\n        ...state,\r\n        inEditMode: true,\r\n        inUpdateMode: true,\r\n        updatePost: {\r\n          ...state.updatePost,\r\n          post: {\r\n            ...state.posts.find((post) => post.id === action.payload.id),\r\n          },\r\n        },\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default fetchPostReducer\r\n","import { combineReducers } from 'redux'\r\nimport fetchPostReducer from './redux/fetchPostReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  fetchPostReducer,\r\n})\r\nexport default rootReducer\r\n","import { applyMiddleware, createStore, compose } from 'redux'\r\nimport rootReducer from './reducer'\r\nimport ReduxThunk from 'redux-thunk'\r\n\r\nconst store = compose(\r\n  applyMiddleware(ReduxThunk),\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)(createStore)(rootReducer)\r\n\r\nexport default store\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}